 // Create a vector of size n with
    // all values as 10.
    vector<int> vect(n, 10); 

/*
    We create a 2D vector containing "n"
    elements each having the value "vector<int> (m, 0)".
    "vector<int> (m, 0)" means a vector having "m"
    elements each of value "0".
    Here these elements are vectors.
    */

    vector<vector<int>> vec( n , vector<int> (m, 0));



largest element of vector
	vector<int> v;
	int max=*max_element(v.bigin(),v.end());
smallest element of vector
	int min=*min_element(v.begin(),v.end());


sort vector accending
	sort(v.begin(),v.end());
sort vector decending 
	sort(v.begin(), v.end(), greater<int>());

sort vector on the basis of a particular column
	// Driver function to sort the 2D vector
	// on basis of a 1st column
bool sortcol( const vector<int>& v1,            //writen outside main()
               const vector<int>& v2 ) {
 return v1[1] < v2[1];
}
    sort(vect.begin(), vect.end(),sortcol);     //writen inside main()
  

to reverse the element of vector
	vector<int> a = { 1, 45, 54, 71, 76, 12 };
	reverse(a.begin(), a.end());
	now the vector will look like-{12, 76, 71, 54, 45, 1};

to Find all possible permutations
   vector<int> a = {1, 2, 3}
    do {
        //here you get next permutation;
    } while (next_permutation(a.begin(), a.end()));

